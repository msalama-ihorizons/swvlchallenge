apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.tiendito.swvlmovies"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions.unitTests {
        includeAndroidResources = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.cardview:cardview:1.0.0"

    //Glide
    def glideVersion = '4.11.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"


    //Generic RecyclerView Adapter
    def genericAdapterVersion = '1.0.1'

    implementation "com.leodroidcoder:generic-adapter:$genericAdapterVersion"

    //retrofit components
    def retrofit = "2.9.0"
    def okhttp3 = "4.3.1"
    def gson = "2.8.5"
    def loggingInterceptor = "4.4.0"

    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3"
    implementation "com.google.code.gson:gson:$gson"
    implementation "com.squareup.okhttp3:logging-interceptor:$loggingInterceptor"

    //lifecycle
    def lifecycle_version = "2.2.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    //implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    //implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    //implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    def room_version = "2.2.5"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    def paging_version = "2.1.2"

    implementation "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx
    implementation "androidx.paging:paging-runtime-ktx:3.0.0-alpha05"
    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$paging_version" // For Kotlin use paging-common-ktx

    def hilt_version = '2.28-alpha'

    // Hilt dependencies
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'

    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Hilt testing dependencies
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    def mock_web_server_version = '4.8.1'
    testImplementation "com.squareup.okhttp3:mockwebserver:$mock_web_server_version"

    def archTestingVersion = '2.1.0'
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"

    def coroutinesTest = '1.3.8'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTest"

    def robolectricVersion = '4.3.1'
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    def androidXTestExtKotlinRunnerVersion = '1.1.1'
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"

    def androidXTestCoreVersion = '1.3.0'
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"

    def mockitoCoreVersion = '2.25.0'
    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"

    testImplementation 'org.mockito:mockito-inline:2.13.0'

/*    def mockitoAllVersion = '1.10.19'
    testImplementation "org.mockito:mockito-all:$mockitoAllVersion"
    def mockitoAndroidVersion = '2.25.0'
    testImplementation "org.mockito:mockito-android:$mockitoAndroidVersion"*/

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}